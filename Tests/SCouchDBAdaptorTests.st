TestCase subclass: #SCouchDBAdaptorTests	instanceVariableNames: 'host port'	classVariableNames: 'DefaultHost'	poolDictionaries: ''	category: 'SCouchDB-Tests'!!SCouchDBAdaptorTests commentStamp: 'Igor.Stasenko 1/12/2010 01:13' prior: 0!For custom host, use:(SCouchDBAdaptorTests new host: 'yourhostname.com')	testStoringConvertedDocuments!!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/9/2010 16:31'!createAdaptor	^ SCouchDBAdaptor new host: self host port: self port.! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/13/2010 22:28'!createDB	^ self createAdaptor ensureDatabase: self dbname.! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 4/8/2010 12:15'!createFreshDB	| adaptor |	adaptor := self createAdaptor.	(adaptor databases includes: self dbname) ifTrue: [		adaptor deleteDatabase: self dbname. ].	^ adaptor  createDatabase: self dbname! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/9/2010 16:30'!dbname	^  'squeak_tests(',self class name asLowercase ,')'! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'ZekeriyaKoc 4/11/2010 18:34'!host	^ host ifNil: [ host := DefaultHost ifNil: ['localhost']]! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/8/2010 19:45'!host: aHostName	host := aHostName! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/8/2010 19:45'!port	^ port ifNil: [ 5984 ] ! !!SCouchDBAdaptorTests methodsFor: 'utils' stamp: 'Igor.Stasenko 1/8/2010 19:45'!port: aPortNum	port := aPortNum! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/14/2010 00:37'!objectsAsDocuments	| dict |	dict := Dictionary new.	dict at: 1 put: 10;		at: 'foo' put: 'bar';		at: #(1 2 3) put: #(4 5 6);		at: false put: true.			^ {		#UndefinedObject -> nil.		#True -> true.		#False -> false.		#SmallInteger -> 123.		#Float -> 1.5.		#Array -> #(1 2 3).		#Point -> (1 @ 2).				#Set -> #(1 2 3 4 true) asSet.				"A couchdb limitation: Dictionary keys should be strings"		#Dictionary ->  dict .	}! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/13/2010 22:29'!testAddingDocument		| db |		db := self createDB.		db documentAt: 1 put: ( JsonObject fromAssociations:  { 'name'->'Test'  } ).		self assert: [ ((db documentAt: 1) at: 'name') = 'Test' ].		db adaptor deleteDatabase: db name.! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'ZekeriyaKoc 4/11/2010 18:33'!testAddingDocumentWithUUID		| db docID |		db := self createDB.	docID := db adaptor newUUID.		db documentAt: docID put: ( JsonObject fromAssociations:  { 'name'->'Test'  } ).		self assert: [ ((db documentAt: docID) at: 'name') = 'Test' ].		db adaptor deleteDatabase: db name.! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/12/2010 00:55'!testConvertingDocument	self objectsAsDocuments do: [:pair | 		self assert: (pair value = ((Smalltalk at: pair key) instantiateFromCouchDocument: pair value asCouchDocument))	]! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/9/2010 17:07'!testCreateDeleteDB	| adaptor |	adaptor := self createAdaptor.		(adaptor databases includes: self dbname) ifTrue: [		adaptor deleteDatabase: self dbname.		].	self assert: (adaptor databases includes: self dbname) not.		adaptor createDatabase: self dbname.		self assert: (adaptor databases includes: self dbname).	adaptor deleteDatabase: self dbname.	! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 4/8/2010 12:03'!testErrorDeletingDB	| adaptor |	adaptor := self createAdaptor.		(adaptor databases includes: self dbname) ifTrue: [		adaptor deleteDatabase: self dbname.		].	self should: [ adaptor deleteDatabase: self dbname]  raise: SCouchDBError! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 4/8/2010 12:17'!testErrorInvalidDocid	| db |		db := self createFreshDB.	self should: [ db documentAt: 1 ] raise: SCouchDBError.		db adaptor deleteDatabase: db name! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 4/8/2010 12:16'!testErrorInvalidRev	| db |		db := self createFreshDB.	db documentAt: 1 put: ( JsonObject fromAssociations:  { 'name'->'Test'  } ).	self should: [ db documentAt: 1 rev: '99-97db6034a0321a88c96c592d870d01bc' ] raise: SCouchDBError.		db adaptor deleteDatabase: db name! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/9/2010 17:07'!testStatistics	| adaptor stats |		adaptor := self createAdaptor.	stats := adaptor statistics.		self assert: (stats includesKey: 'couchdb')! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 1/13/2010 22:29'!testStoringConvertedDocuments	| db |	db := self createDB.		self objectsAsDocuments withIndexDo: [:pair :i | 				"save object into couch db"		db at: i put: pair value.				"dict test fails by now"		self assert: (db at:i) = pair value	].	db adaptor deleteDatabase: db name.	! !!SCouchDBAdaptorTests methodsFor: 'tests' stamp: 'Igor.Stasenko 5/13/2010 05:14'!testUnicodeChars	| db string |		db := self createDB.	string := 'Я русский бы выучил только за то'.		db at: 1 put: string.		self assert: [ (db at: 1) = string ].		db adaptor deleteDatabase: db name.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SCouchDBAdaptorTests class	instanceVariableNames: ''!!SCouchDBAdaptorTests class methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 4/7/2010 01:49'!setDefaultHost: aString	DefaultHost := aString! !